<?php

namespace Services\Zoo\Controller;

// Namespace imports
use Services\Zoo\Thrift;
use Services\Zoo\Exception;

// Third-party imports
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Thrift\Base\TBase;

/**
 * Base controller for all other zoo controllers. Contains some useful helper methods.
 *
 * @package Services\Zoo\Controller
 *
 * Generated by com.upwork.donkey.example.php.GeneratorAwareTemplateGroupFactory vdonkey-example:1.0-SNAPSHOT
 */
abstract class ZooController extends Controller
{
    /**
     * @var ThriftMessageConverter
     */
    protected $messageConverter;

    /**
     * @param ThriftMessageConverter $messageConverter
     */
    public function __construct(ThriftMessageConverter $messageConverter)
    {
        $this->messageConverter = $messageConverter;
    }

    /**
     * @param Request $request
     * @param string $type
     *
     * @return TBase|null
     */
    protected function readRequestBody(Request $request, string $type): ?TBase
    {
        if (!$request->getContent()) {
            return null;
        }

        return $this->messageConverter->read($request, $type);
    }

    /**
     * @return Response
     */
    protected function emptyResponse(): Response
    {
        return new Response(null, 204);
    }

    /**
     * @param Request $request
     * @param TBase|null $result
     *
     * @return Response
     */
    protected function mapResponse(Request $request, ?TBase $result): Response
    {
        if (!$result) {
            return $this->emptyResponse();
        }

        $this->messageConverter->write(
            $response = new Response(),
            $result,
            $request->getAcceptableContentTypes()
        );

        return $response;
    }

    /**
     * @param Exception\ZooException $exception
     *
     * @return Response
     */
    protected function mapErrorResponse(Exception\ZooException $exception): Response
    {
        $response = $this->emptyResponse();
        $response->setStatusCode($exception->getStatusCode());
        $response->headers->set("vnd.error", $exception->getErrorCode());

        return $response;
    }
}