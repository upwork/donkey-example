<?php

namespace Services\Zoo\Controller;

// Class imports
use Services\Zoo\Service\StaffService;

// Namespace imports
use Services\Zoo\Thrift;
use Services\Zoo\Exception;

// Third-party imports
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Thrift\Base\TBase;

/**
 * @Route(path="/staff")
 *
 * @package Services\Zoo\Controller
 *
 * Generated by com.upwork.donkey.example.php.GeneratorAwareTemplateGroupFactory vdonkey-example:1.0-SNAPSHOT
 */
class StaffController extends ZooController
{
    /**
     * @var StaffService $service
     */
    private $service;

    /**
     * @param StaffService $service
     * @param ThriftMessageConverter $messageConverter
     */
    public function __construct(StaffService $service, ThriftMessageConverter $messageConverter)
    {
        parent::__construct($messageConverter);

        $this->service = $service;
    }

    /**
     * @Route(path="/janitors", methods="POST")
     *
     * @param Request $request
     *
     * @return Response
     */
    public function hireJanitor(Request $request): Response
    {
        $janitor = $this->readRequestBody($request, Thrift\Person::class);

        $this->service->hireJanitor($janitor);

        return $this->emptyResponse();
    }

    /**
     * @Route(path="/guards", methods="POST")
     *
     * @param Request $request
     *
     * @return Response
     */
    public function hireGuard(Request $request): Response
    {
        $guard = $this->readRequestBody($request, Thrift\Person::class);

        $this->service->hireGuard($guard);

        return $this->emptyResponse();
    }

    /**
     * Find employees by their first name or last name
     *
     * @Route(path="", methods="GET")
     *
     * @param Request $request
     *
     * @return Response A response containing Thrift\PersonList.
     */
    public function getAllEmployees(Request $request): Response
    {
        $firstName = $request->query->get("firstName");
        $lastName = $request->query->get("lastName");

        $result = $this->service->getAllEmployees($firstName, $lastName);

        return $this->mapResponse($request, $result);
    }

    /**
     * Fire an employee by their ID number
     *
     * @Route(path="/{id}", methods="DELETE")
     *
     * @param string $id
     * @param Request $request
     *
     * @return Response
     */
    public function terminateEmployee(string $id, Request $request): Response
    {
        $this->service->terminateEmployee($id);

        return $this->emptyResponse();
    }
}