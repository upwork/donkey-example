<?php

namespace Services\Zoo\Controller;

// Class imports
use Services\Zoo\Service\AnimalsService;

// Namespace imports
use Services\Zoo\Thrift;
use Services\Zoo\Exception;

// Third-party imports
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Thrift\Base\TBase;

/**
 * @Route(path="/animals")
 *
 * @package Services\Zoo\Controller
 *
 * Generated by com.upwork.donkey.example.php.GeneratorAwareTemplateGroupFactory vdonkey-example:1.0-SNAPSHOT
 */
class AnimalsController extends ZooController
{
    /**
     * @var AnimalsService $service
     */
    private $service;

    /**
     * @param AnimalsService $service
     * @param ThriftMessageConverter $messageConverter
     */
    public function __construct(AnimalsService $service, ThriftMessageConverter $messageConverter)
    {
        parent::__construct($messageConverter);

        $this->service = $service;
    }

    /**
     * Retrieves all animals in the zoo;
     *
     * @Route(path="", methods="GET")
     *
     * @param Request $request
     *
     * @return Response A response containing Thrift\AnimalList.
     */
    public function getAll(Request $request): Response
    {
        $result = $this->service->getAll();

        return $this->mapResponse($request, $result);
    }

    /**
     * @Route(path="/{type}", methods="POST")
     *
     * @param string $type
     * @param Request $request
     *
     * @return Response
     */
    public function addAnimal(string $type, Request $request): Response
    {
        $animal = $this->readRequestBody($request, Thrift\Animal::class);

        $this->service->addAnimal($type, $animal);

        return $this->emptyResponse();
    }

    /**
     * @Route(path="/{type}", methods="GET")
     *
     * @param string $type
     * @param Request $request
     *
     * @return Response A response containing Thrift\AnimalList.
     */
    public function findAnimalsByType(string $type, Request $request): Response
    {
        try {
            $result = $this->service->findAnimalsByType($type);

            return $this->mapResponse($request, $result);
        } catch(Exception\ZooException $exception) {
            return $this->mapErrorResponse($exception);
        }
    }

    /**
     * Marks all animals as vaccinated
     *
     * @Route(path="/{type}/vaccinate", methods="POST")
     *
     * @param string $type
     * @param Request $request
     *
     * @return Response
     */
    public function markAsVaccinated(string $type, Request $request): Response
    {
        try {
            // PHP by default uses a non-standard compliant practice of adding brackets to multivalued parameters
            // We access query string directly to get the values
            $names = [];
            foreach(explode('&', $request->server->get("QUERY_STRING")) as $param) {
                list($key, $value) = explode('=', $param);
                if ($key == 'names') {
                    $names[] = $value;
                }
            }

            $this->service->markAsVaccinated($type, $names);

            return $this->emptyResponse();
        } catch(Exception\ZooException $exception) {
            return $this->mapErrorResponse($exception);
        }
    }
}