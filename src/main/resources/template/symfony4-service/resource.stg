import "importClasses.stg"

resource(resourceDefinition, generator)::= <<\<?php

namespace <namespace()>\\Controller;

// Class imports
<resourceDefinition.serviceDefinition.classImports.php:importClass(); separator="\n">
use <namespace()>\\Service\\<resourceDefinition.name; format="cap">Service;

// Namespace imports
<resourceDefinition.serviceDefinition.namespaceImports.php:importClass(); separator="\n">
use <namespace()>\\Exception;

// Third-party imports
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Thrift\Base\TBase;

/**
<if (resourceDefinition.doc)> * <resourceDefinition.doc; separator="\n * ">
 *
<endif>
<if(resourceDefinition.basePath)>
 * @Route(path="<resourceDefinition.basePath>")
 *
<endif>
 * @package <namespace()>\\Controller
 *
 * Generated by <generator>
 */
class <resourceDefinition.name; format="cap">Controller extends <resourceDefinition.serviceDefinition.name; format="cap">Controller
{
    /**
     * @var <resourceDefinition.name>Service $service
     */
    private $service;

    /**
     * @param <resourceDefinition.name>Service $service
     * @param ThriftMessageConverter $messageConverter
     */
    public function __construct(<resourceDefinition.name>Service $service, ThriftMessageConverter $messageConverter)
    {
        parent::__construct($messageConverter);

        $this->service = $service;
    }

    <resourceDefinition.methodDefinitions:resourceMethod(); separator="\n\n">
}
>>

resourceMethod(resourceMethodDefinition)::= <<
/**
<if (resourceMethodDefinition.doc)>
 * <resourceMethodDefinition.doc:descriptionDocBlock(); separator="\n * ">
 *
<endif>
 * <resourceMethodDefinition:routeDocBlock()>
 *
<if (resourceMethodDefinition.pathParams)>
 * <resourceMethodDefinition.pathParams:paramDocBlock(); separator="\n * ">
<endif>
 * @param Request $request
 *
 * <resourceMethodDefinition:returnTypeDocBlock()>
 */
<resourceMethodSignature()>: Response
{
    <if (resourceMethodDefinition.throwableExceptions)>
    try {
        <if (resourceMethodDefinition.queryParams)>
        <resourceMethodDefinition.queryParams:extractQueryParamFromRequest(); separator="\n">

        <endif>
        <if (resourceMethodDefinition.requestBody)>
        <resourceMethodDefinition.requestBody:extractBodyFromRequest()>

        <endif>
<\ ><\ ><\ ><\ ><\ ><\ ><\ ><\ ><if(resourceMethodDefinition.returnType)>$result = <endif>$this->service-><resourceMethodDefinition.name>(<resourceMethodDefinition.argumentDefinitions:resourceMethodArgument(); separator=", ">);

        return $this-><if(resourceMethodDefinition.returnType)>mapResponse($request, $result)<else>emptyResponse()<endif>;
    } catch(<baseServiceException()> $exception) {
        return $this->mapErrorResponse($exception);
    }
    <else>
    <if (resourceMethodDefinition.queryParams)>
    <resourceMethodDefinition.queryParams:extractQueryParamFromRequest(); separator="\n">

    <endif>
    <if (resourceMethodDefinition.requestBody)>
    <resourceMethodDefinition.requestBody:extractBodyFromRequest()>

    <endif>
<\ ><\ ><\ ><\ ><if(resourceMethodDefinition.returnType)>$result = <endif>$this->service-><resourceMethodDefinition.name>(<resourceMethodDefinition.argumentDefinitions:resourceMethodArgument(); separator=", ">);

    return $this-><if(resourceMethodDefinition.returnType)>mapResponse($request, $result)<else>emptyResponse()<endif>;
    <endif>
}
>>

namespace()::= <%
<resourceDefinition.serviceDefinition.namespaces.php; format="phpNamespace">
%>

descriptionDocBlock(description)::= <%
<trim(description)>
%>

routeDocBlock(resourceMethodDefinition)::= <%
@Route(path="<resourceMethodDefinition.path>", methods="<resourceMethodDefinition.httpMethod; format="fullCap">")
%>

paramDocBlock(argumentDefinition)::= <%
<argumentDefinition; format="docBlock">
%>

returnTypeDocBlock(resourceMethodDefinition)::= <%
@return Response
<if (resourceMethodDefinition.returnType)><\ >A response containing <resourceMethodDefinition.returnType; format="dockBlock">.<endif>
<if (resourceMethodDefinition.returnDoc)><\ ><trim(resourceMethodDefinition.returnDoc)><endif>
%>

resourceMethodSignature()::= <%
public function <resourceMethodDefinition.name>(
    <resourceMethodDefinition.pathParams:resourceMethodParameter(); separator=", ">
    <if (resourceMethodDefinition.pathParams)>, <endif>Request $request
)
%>

resourceMethodParameter(argumentDefinition)::= <%
<argumentDefinition; format="parameter">
%>

extractQueryParamFromRequest(argumentDefinition)::= <<
<if (argumentDefinition.type.collectionType)>
// PHP by default uses a non-standard compliant practice of adding brackets to multivalued parameters
// We access query string directly to get the values
<argumentDefinition; format="argument"> = [];
foreach(explode('&', $request->server->get("QUERY_STRING")) as $param) {
    list($key, $value) = explode('=', $param);
    if ($key == '<argumentDefinition.name; format="camelCase">') {
        <argumentDefinition; format="argument">[] = $value;
    }
}<else><argumentDefinition; format="argument"> = $request->query->get("<argumentDefinition.name; format="camelCase">"<if (argumentDefinition.defaultValue)>, <argumentDefinition; format="defaultValue"><endif>);<endif>
>>

extractBodyFromRequest(argumentDefinition)::= <%
<argumentDefinition; format="argument"> = $this->readRequestBody($request, <argumentDefinition.type; format="docBlock">::class);
%>

resourceMethodArgument(argumentDefinition)::= <%
<argumentDefinition; format="argument">
%>

baseServiceException()::= <%
Exception\\<resourceDefinition.serviceDefinition.name; format="cap">Exception
%>