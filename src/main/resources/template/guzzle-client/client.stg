import "importClasses.stg"

client(resourceDefinition, generator)::= <<\<?php

namespace <namespace()>\\Client;

// Class imports
<resourceDefinition.serviceDefinition.classImports.php:importClass(); separator="\n">

// Namespace imports
<resourceDefinition.serviceDefinition.namespaceImports.php:importClass(); separator="\n">
use <namespace()>\\Exception;

// Third-party imports
use GuzzleHttp\Client as GuzzleHttpClient;
use GuzzleHttp\Exception\BadResponseException;
use GuzzleHttp\Exception\TransferException;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Psr7\Uri;
use Thrift\Base\TBase;

/**
<if (resourceDefinition.doc)> * <resourceDefinition.doc; separator="\n * ">
 *
<endif>
 * @package <namespace()>
 *
 * Generated by <generator>
 */
class <resourceDefinition.name; format="cap">Client extends <resourceDefinition.serviceDefinition.name; format="cap">Client
{
    private const BASE_PATH = "<resourceDefinition.basePath>";

    /**
     * @param GuzzleHttpClient $httpClient
     * @param ThriftMessageConverter $messageConverter
     */
    public function __construct(GuzzleHttpClient $httpClient, ThriftMessageConverter $messageConverter)
    {
        parent::__construct($httpClient, $messageConverter);
    }

    <resourceDefinition.methodDefinitions:resourceMethod(); separator="\n\n">
}

>>

resourceMethod(resourceMethodDefinition)::= <<
/**
<if (resourceMethodDefinition.doc)>
 * <resourceMethodDefinition.doc:descriptionDocBlock(); separator="\n * ">
<endif>
<if (resourceMethodDefinition.argumentDefinitions)>
 *
 * <resourceMethodDefinition.argumentDefinitions:paramDocBlock(); separator="\n * ">
<endif>
<if (resourceMethodDefinition.returnType)>
 *
 * <resourceMethodDefinition:returnTypeDocBlock()>
<endif>
<if (resourceMethodDefinition.throwableExceptions)>
 *
 * <resourceMethodDefinition.throwableExceptions:exceptionDocBlock(); separator="\n * ">
<endif>
 */
<resourceMethodSignature(resourceMethodDefinition)>
{
<\ ><\ ><\ ><\ ><if (resourceMethodDefinition.returnType)>return <endif>$this->sendRequest(
        "<resourceMethodDefinition.httpMethod; format="fullCap">",
        self::BASE_PATH."<resourceMethodDefinition.path; format="phpPathTemplate">",
        [<resourceMethodDefinition.pathParams:pathParamArgument(); separator=", ">],
        [<resourceMethodDefinition.queryParams:queryParamArgument(); separator=", ">],
        <if (resourceMethodDefinition.requestBody)><resourceMethodDefinition.requestBody; format="argument"><else>null<endif>,
        <if (resourceMethodDefinition.returnType)><resourceMethodDefinition.returnType; format="docBlock">::class<else>null<endif>
    );
}
>>

namespace()::= <%
<resourceDefinition.serviceDefinition.namespaces.php; format="phpNamespace">
%>

descriptionDocBlock(description)::= <%
<trim(description)>
%>

paramDocBlock(argumentDefinition)::= <%
<argumentDefinition; format="docBlock">
%>

returnTypeDocBlock(resourceMethodDefinition)::= <%
@return <resourceMethodDefinition.returnType; format="docBlock;optional">
<if (resourceMethodDefinition.returnDoc)><\ ><trim(resourceMethodDefinition.returnDoc)><endif>
%>

exceptionDocBlock(exceptionIdentifier)::= <%
@throws Exception\\<exceptionIdentifier; format="cap">
%>

resourceMethodSignature(resourceMethodDefinition)::= <%
public function <resourceMethodDefinition.name>(
<resourceMethodDefinition.argumentDefinitions:resourceMethodParameter(); separator=", ">
): <resourceMethodReturnType(resourceMethodDefinition)>
%>

resourceMethodParameter(argumentDefinition)::= <%
<argumentDefinition; format="parameter">
%>

resourceMethodReturnType(resourceMethodDefinition)::= <%
<if (resourceMethodDefinition.returnType)><resourceMethodDefinition.returnType; format="typeHint;optional"><else>void<endif>
%>

pathParamArgument(argumentDefinition)::= <%
<argumentDefinition; format="argument">
%>

queryParamArgument(argumentDefinition)::= <%
"<argumentDefinition.name>" => <argumentDefinition; format="argument">
%>
