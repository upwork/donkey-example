<?php

namespace Services\Zoo\Client;

// Class imports

// Namespace imports
use Services\Zoo\Thrift;
use Services\Zoo\Exception;

// Third-party imports
use GuzzleHttp\Client as GuzzleHttpClient;
use GuzzleHttp\Exception\BadResponseException;
use GuzzleHttp\Exception\TransferException;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Psr7\Uri;
use Thrift\Base\TBase;

/**
 * @package Services\Zoo
 *
 * Generated by com.upwork.donkey.example.php.GeneratorAwareTemplateGroupFactory vdonkey-example:1.0-SNAPSHOT
 */
class AnimalsClient extends ZooClient
{
    private const BASE_PATH = "/animals";

    /**
     * @param GuzzleHttpClient $httpClient
     * @param ThriftMessageConverter $messageConverter
     */
    public function __construct(GuzzleHttpClient $httpClient, ThriftMessageConverter $messageConverter)
    {
        parent::__construct($httpClient, $messageConverter);
    }

    /**
     * Retrieves all animals in the zoo;
     *
     * @return Thrift\AnimalList|null
     */
    public function getAll(): ?Thrift\AnimalList
    {
        return $this->sendRequest(
            "GET",
            self::BASE_PATH."",
            [],
            [],
            null,
            Thrift\AnimalList::class
        );
    }

    /**
     *
     * @param string $type
     * @param Thrift\Animal|null $animal
     */
    public function addAnimal(string $type, ?Thrift\Animal $animal): void
    {
        $this->sendRequest(
            "POST",
            self::BASE_PATH."/%s",
            [$type],
            [],
            $animal,
            null
        );
    }

    /**
     *
     * @param string $type
     *
     * @return Thrift\AnimalList|null
     *
     * @throws Exception\InvalidAnimalTypeException
     */
    public function findAnimalsByType(string $type): ?Thrift\AnimalList
    {
        return $this->sendRequest(
            "GET",
            self::BASE_PATH."/%s",
            [$type],
            [],
            null,
            Thrift\AnimalList::class
        );
    }

    /**
     * Marks all animals as vaccinated
     *
     * @param string $type
     * @param string[]|null $names
     *
     * @throws Exception\AlreadyVaccinatedException
     */
    public function markAsVaccinated(string $type, ?array $names): void
    {
        $this->sendRequest(
            "POST",
            self::BASE_PATH."/%s/vaccinate",
            [$type],
            ["names" => $names],
            null,
            null
        );
    }
}
