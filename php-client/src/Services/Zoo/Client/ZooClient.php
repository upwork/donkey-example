<?php

namespace Services\Zoo\Client;

// Namespace imports
use Services\Zoo\Thrift;
use Services\Zoo\Exception;

// Third-party imports
use GuzzleHttp\Client as GuzzleHttpClient;
use GuzzleHttp\Exception\BadResponseException;
use GuzzleHttp\Exception\TransferException;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Psr7\Uri;
use Thrift\Base\TBase;

/**
 * Base client for all other zoo clients. Contains some useful helper methods.
 *
 * @package Services\Zoo\Controller
 *
 * Generated by com.upwork.donkey.example.php.GeneratorAwareTemplateGroupFactory vdonkey-example:1.0-SNAPSHOT
 */
abstract class ZooClient
{
    /**
     * @var GuzzleHttpClient
     */
    private $httpClient;

    /**
     * @var ThriftMessageConverter
     */
    private $messageConverter;

    /**
     * @param GuzzleHttpClient $httpClient
     * @param ThriftMessageConverter $messageConverter
     */
    public function __construct(GuzzleHttpClient $httpClient, ThriftMessageConverter $messageConverter)
    {
        $this->httpClient = $httpClient;
        $this->messageConverter = $messageConverter;
    }

    /**
     * Constructs a request from the given arguments, sends it to the remote service and then processes the response,
     * either returning the requested response entity or null if there wasn't any or throwing an exception if the server
     * responded with an error.
     *
     * @param string $method The HTTP request method
     * @param string $path The path of the requested resource
     * @param string[] $pathParams Array of path parameters that will be substituted for the placeholders in the path
     * @param mixed[] $queryParams Array of query parameters (parameter name => parameter value)
     * @param TBase|null $requestPayload The request payload (if any)
     * @param string|null $responsePayloadType The response payload's type (if any)
     *
     * @return TBase|null The deserialized response entity (if any)
     *
     * @throws Exception\ZooException If a domain-specific error is received from the server
     * @throws TransferException If a generic error occurs while processing the request
     * @throws \Exception If the server responds with an unexpected status code (anything outside the standard 2XX / 3XX / 4XX / 5XX codes)
     */
    protected function sendRequest(
        string $method,
        string $path,
        array $pathParams,
        array $queryParams,
        ?TBase $requestPayload,
        ?string $responsePayloadType
    ): ?TBase {
        $uri = ($this->httpClient->getConfig("base_uri") ?: new Uri())
            ->withPath(sprintf($path, ...$pathParams))
            ->withQuery($this->generateQueryString($queryParams));

        $headers = $this->httpClient->getConfig("headers") ?: [];

        $request = new Request($method, $uri, $headers);
        if ($requestPayload) {
            $request = $this->messageConverter->write($request, $requestPayload);
        }

        try {
            $response = $this->httpClient->send($request);
            if ($response->getStatusCode() >= 200 && $response->getStatusCode() < 300) {
                if (!$responsePayloadType || $response->getStatusCode() === 204) {
                    return null;
                }

                return $this->messageConverter->read($response, $responsePayloadType);
            } else {
                throw new \Exception("Unexpected status code {$response->getStatusCode()} received");
            }
        } catch (BadResponseException $exception) {
            // In case of HTTP 4XX and 5XX responses
            throw $this->mapHttpExceptionToDomainException($exception) ?: $exception;
        }
    }

    /**
     * Constructs the query string part of the URL from the given query parameters.
     *
     * @param mixed[] $queryParams The array of query params
     * @return string The constructed query string
     */
    private function generateQueryString(array $queryParams)
    {
        $queryString = http_build_query($queryParams, null, "&", PHP_QUERY_RFC3986);
        $queryString = preg_replace("/%5B[0-9]*%5D=/", "=", $queryString);

        return $queryString;
    }

    /**
     * Maps a Guzzle HTTP exception to a Exception\ZooExceptionException if such a mapping exists or null if not.
     *
     * @param BadResponseException $httpException
     *
     * @return Exception\ZooException|null
     */
    private function mapHttpExceptionToDomainException(BadResponseException $httpException): ?Exception\ZooException
    {
        if (!$httpException->hasResponse()) {
            return null;
        }

        $errorCode = $httpException->getResponse()->getHeader("vnd.error");

        return empty($errorCode) ? null : $this->mapErrorCodeToDomainException((int) $errorCode[0]);
    }

    /**
     * Maps a Donkey error code to a Exception\ZooExceptionException if such a mapping exists or null if not.
     *
     * @param int $errorCode
     *
     * @return Exception\ZooException|null
     */
    private function mapErrorCodeToDomainException(int $errorCode): ?Exception\ZooException
    {
        switch ($errorCode) {
            case Exception\InvalidAnimalTypeException::ERROR_CODE:
                return new Exception\InvalidAnimalTypeException();
            case Exception\AlreadyVaccinatedException::ERROR_CODE:
                return new Exception\AlreadyVaccinatedException();
            default:
                return null;
        }
    }
}