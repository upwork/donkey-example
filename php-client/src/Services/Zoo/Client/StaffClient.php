<?php

namespace Services\Zoo\Client;

// Class imports

// Namespace imports
use Services\Zoo\Thrift;
use Services\Zoo\Exception;

// Third-party imports
use GuzzleHttp\Client as GuzzleHttpClient;
use GuzzleHttp\Exception\BadResponseException;
use GuzzleHttp\Exception\TransferException;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Psr7\Uri;
use Thrift\Base\TBase;

/**
 * @package Services\Zoo
 *
 * Generated by com.upwork.donkey.example.php.GeneratorAwareTemplateGroupFactory vdonkey-example:1.0-SNAPSHOT
 */
class StaffClient extends ZooClient
{
    private const BASE_PATH = "/staff";

    /**
     * @param GuzzleHttpClient $httpClient
     * @param ThriftMessageConverter $messageConverter
     */
    public function __construct(GuzzleHttpClient $httpClient, ThriftMessageConverter $messageConverter)
    {
        parent::__construct($httpClient, $messageConverter);
    }

    /**
     *
     * @param Thrift\Person|null $janitor
     */
    public function hireJanitor(?Thrift\Person $janitor): void
    {
        $this->sendRequest(
            "POST",
            self::BASE_PATH."/janitors",
            [],
            [],
            $janitor,
            null
        );
    }

    /**
     *
     * @param Thrift\Person|null $guard
     */
    public function hireGuard(?Thrift\Person $guard): void
    {
        $this->sendRequest(
            "POST",
            self::BASE_PATH."/guards",
            [],
            [],
            $guard,
            null
        );
    }

    /**
     * Find employees by their first name or last name
     *
     * @param string|null $firstName
     * @param string|null $lastName
     *
     * @return Thrift\PersonList|null
     */
    public function getAllEmployees(?string $firstName, ?string $lastName): ?Thrift\PersonList
    {
        return $this->sendRequest(
            "GET",
            self::BASE_PATH."",
            [],
            ["firstName" => $firstName, "lastName" => $lastName],
            null,
            Thrift\PersonList::class
        );
    }

    /**
     * Fire an employee by their ID number
     *
     * @param string $id
     */
    public function terminateEmployee(string $id): void
    {
        $this->sendRequest(
            "DELETE",
            self::BASE_PATH."/%s",
            [$id],
            [],
            null,
            null
        );
    }
}
